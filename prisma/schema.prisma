// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  produkte      Produkt[] @relation("UserToProdukt")
  settings      UserSettings?

  @@map("user")
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  idToken String? @db.Text

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Produkt {
  id          String       @id @default(cuid()) @map("_id")
  userId      String
  user        User      @relation("UserToProdukt", fields: [userId], references: [id])
  name        String
  menge       Float
  einheit     String
  ablaufdatum DateTime
  erfasstAm   DateTime
  kategorie   String
  bildUrl     String
  createdAt   DateTime  @default(now())

  @@map("produkt")
}

model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  warnLevelBald   Int      @default(3)  // z.B. 3 Tage
  warnLevelExpired Int     @default(0)  // z.B. 0 Tage = abgelaufen
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userSettings")
}
